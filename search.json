[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Mastering R by Examples",
    "section": "",
    "text": "About\nThis is a cookbook recipes for R using data directly. There is no structure in this book. All chapters are independent and can be executed directly. Use these recipe to quickly learn to solving data analytics with R."
  },
  {
    "objectID": "load_and_prepare.html#without-correction",
    "href": "load_and_prepare.html#without-correction",
    "title": "1  Reading CSV file",
    "section": "1.1 Without correction",
    "text": "1.1 Without correction\n\nread_csv('../NEDA/Version_03062024_SurvivalAllCases/Aortopathy_ECHO_Progression_03_VALID.csv', \n         show_col_types = FALSE) %&gt;%\n  select(StudyID, PatientID, Sex, Age_At_Echo, Examination_Date, Outcome, SoV, STJ, AscAo) %&gt;%\n  sample_n(10000) %&gt;%\n  glimpse()\n\nRows: 10,000\nColumns: 9\n$ StudyID          &lt;dbl&gt; 1942172, 1141429, 2052781, 1853266, 1055877, 201960, …\n$ PatientID        &lt;dbl&gt; 741853, 147707, 745383, 641430, 403302, 287016, 21204…\n$ Sex              &lt;chr&gt; \"Male\", \"Female\", \"Female\", \"Male\", \"Male\", \"Female\",…\n$ Age_At_Echo      &lt;dbl&gt; 81, 79, 78, 84, 68, 63, 64, 83, 93, 61, 89, 82, 68, 8…\n$ Examination_Date &lt;date&gt; 2009-01-06, 2015-11-04, 2015-05-07, 2003-06-18, 2008…\n$ Outcome          &lt;chr&gt; \"Dead\", \"Alive\", \"Alive\", \"Alive\", \"Dead\", \"Alive\", \"…\n$ SoV              &lt;dbl&gt; 4.000, 2.400, 3.200, 4.000, 3.880, 3.032, 2.995, 2.98…\n$ STJ              &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, 3.8, 4.0, 4.0, NA…\n$ AscAo            &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…"
  },
  {
    "objectID": "load_and_prepare.html#with-corrections",
    "href": "load_and_prepare.html#with-corrections",
    "title": "1  Reading CSV file",
    "section": "1.2 With corrections",
    "text": "1.2 With corrections\nand some new variables added\n\ndt &lt;- read_csv('../NEDA/Version_03062024_SurvivalAllCases/Aortopathy_ECHO_Progression_03_VALID.csv', \n         show_col_types = FALSE,\n         col_types = cols(\n           PatientID = col_character(), \n           StudyID = col_character(),\n           Examination_Date = col_date(\"%Y-%m-%d\"),\n           Sex = col_factor(),\n           Outcome = col_factor())) %&gt;%\n  # select few variables for the sake of simplicity\n  select(StudyID, PatientID, Sex, Age_At_Echo, Examination_Date, Outcome, SoV, STJ, AscAo) %&gt;%\n  # just take randomly 10,000 rows for this demonstration\n  sample_n(10000) %&gt;%\n  mutate(\n    # we want to create a new variable Age that consists of range of ages\n    Age = case_when(\n      Age_At_Echo &lt; 40 ~ \"&lt; 40\",\n      Age_At_Echo &lt; 50 ~ \"40-50\",\n      Age_At_Echo &lt; 60 ~ \"50-60\",\n      Age_At_Echo &lt; 70 ~ \"60-70\",\n      Age_At_Echo &gt;= 70 ~ \"≥ 70\"\n    ) %&gt;% factor(levels=c(\"&lt; 40\", \"40-50\", \"50-60\", \"60-70\", \"≥ 70\"))\n  ) %&gt;%\n  # another computation is to create a new variable called Aorta_Size\n  # which takes the maximum value between SoV, STJ, and Asc_Ao values\n  # for each scan, then categorise it to 4 groups of severities\n  rowwise() %&gt;%\n  mutate(\n    AortaSize = max(SoV, STJ, AscAo, na.rm=TRUE),\n    AortaSize_cat = case_when(\n      AortaSize &lt;= 4.0 ~ \"Normal\",\n      AortaSize &lt;= 4.5 ~ \"Mild\",\n      AortaSize &lt;= 5.0 ~ \"Moderate\",\n      AortaSize &lt;= 9.0 ~ \"Severe\",\n      .default = NA) %&gt;% factor(levels = c(\"Normal\", \"Mild\", \"Moderate\", \"Severe\"))) %&gt;%\n  ungroup()\n\n# show the structure\nglimpse(dt)\n\nRows: 10,000\nColumns: 12\n$ StudyID          &lt;chr&gt; \"908616\", \"2130723\", \"1547765\", \"1368887\", \"1630789\",…\n$ PatientID        &lt;chr&gt; \"230897\", \"832876\", \"154826\", \"320934\", \"582469\", \"49…\n$ Sex              &lt;fct&gt; Male, Male, Male, Female, Male, Male, Male, Female, M…\n$ Age_At_Echo      &lt;dbl&gt; 57, 72, 47, 89, 91, 64, 75, 40, 79, 80, 81, 58, 74, 6…\n$ Examination_Date &lt;date&gt; 2011-03-01, 2003-05-29, 2016-11-15, 2011-08-19, 2016…\n$ Outcome          &lt;fct&gt; Alive, Dead, Alive, Alive, Dead, Alive, Alive, Dead, …\n$ SoV              &lt;dbl&gt; 3.195, 4.400, 3.400, 3.000, 3.414, 3.404, 3.900, 2.60…\n$ STJ              &lt;dbl&gt; NA, 4.1, 2.6, NA, 2.4, NA, 3.8, NA, 3.4, NA, NA, NA, …\n$ AscAo            &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ Age              &lt;fct&gt; 50-60, ≥ 70, 40-50, ≥ 70, ≥ 70, 60-70, ≥ 70, 40-50, ≥…\n$ AortaSize        &lt;dbl&gt; 3.195, 4.400, 3.400, 3.000, 3.414, 3.404, 3.900, 2.60…\n$ AortaSize_cat    &lt;fct&gt; Normal, Mild, Normal, Normal, Normal, Normal, Normal,…\n\n\nExplanations\n\nCorrecting data types\n\nThe argument of\n\ncol_types = cols(\n  PatientID = col_character(), \n  StudyID = col_character(),\n  Examination_Date = col_date(\"%Y-%m-%d\"),\n  Sex = col_factor(),\n  Outcome = col_factor()\n)\n\nforces read_csv() to use specific data types for specific columns (see: cols specification).\n\nCreate a new variable with mutate\n\nThe statement\n\nmutate(\n  Age = case_when(\n    Age_At_Echo &lt; 40 ~ \"&lt; 40\",\n    Age_At_Echo &lt; 50 ~ \"40-50\",\n    Age_At_Echo &lt; 60 ~ \"50-60\",\n    Age_At_Echo &lt; 70 ~ \"60-70\",\n    Age_At_Echo &gt;= 70 ~ \"≥ 70\"\n    ) %&gt;% factor(levels=c(\"&lt; 40\", \"40-50\", \"50-60\", \"60-70\", \"≥ 70\"))\n)\n\ncreates a new column Age as a factor that shows a range of ages between &lt;40, 40-50, 50-60, 60-70, ≥70 years old.\nThere is also another mutate statement to create a new column AortaSize and AortaSize_cat based on the maximum value between STJ, SoV and AscAo measurements. I separated this creation from the above because we need to specify R to calculate the maximum value row-wise instead of column-wise. Hence the rowwise() function preceded.\n\nrowwise() %&gt;%\nmutate(\n  AortaSize = max(SoV, STJ, AscAo, na.rm=TRUE),\n  AortaSize_cat = case_when(\n    AortaSize &lt;= 4.0 ~ \"Normal\",\n    AortaSize &lt;= 4.5 ~ \"Mild\",\n    AortaSize &lt;= 5.0 ~ \"Moderate\",\n    AortaSize &lt;= 9.0 ~ \"Severe\",\n    .default = NA) %&gt;% factor(levels = c(\"Normal\", \"Mild\", \"Moderate\", \"Severe\"))\n)\n\nSee more about mutate, case_when, and rowwise functions."
  },
  {
    "objectID": "load_and_prepare.html#table-summary",
    "href": "load_and_prepare.html#table-summary",
    "title": "1  Reading CSV file",
    "section": "1.3 Table summary",
    "text": "1.3 Table summary\nLet’s summarise our data to compare all patients based on their survival: dead or alive.\n\nlibrary('gtsummary')\n\nNote that the data may contain multiple scans for a patient. Thus, we will search the earliest scan first for each patient for the comparison.\n\ndt %&gt;%\n  # analyse examination date per patient\n  group_by(PatientID) %&gt;%\n  mutate(\n    Earliest_Date = min(Examination_Date)\n  ) %&gt;%\n  # release the grouping and now filter the earliest date only\n  ungroup() %&gt;%\n  filter(Examination_Date == Earliest_Date) %&gt;%\n  # this should filter out multiple scan\n  # we can safely give the data to tbl_summary function\n  tbl_summary(\n    by = Outcome,\n    include = c(Sex, Age, SoV, STJ, AscAo, AortaSize, AortaSize_cat),\n    missing = \"no\"\n  ) %&gt;%\n  add_p() %&gt;%\n  separate_p_footnotes()\n\n\n\n\n\n  \n    \n      Characteristic\n      Alive, N = 7,0401\n      Dead, N = 2,8411\n      p-value\n    \n  \n  \n    Sex\n\n\n&lt;0.0012\n        Male\n3,675 (52%)\n1,632 (57%)\n\n        Female\n3,365 (48%)\n1,209 (43%)\n\n    Age\n\n\n&lt;0.0012\n        &lt; 40\n1,136 (16%)\n74 (2.6%)\n\n        40-50\n900 (13%)\n109 (3.8%)\n\n        50-60\n1,389 (20%)\n209 (7.4%)\n\n        60-70\n1,682 (24%)\n500 (18%)\n\n        ≥ 70\n1,933 (27%)\n1,949 (69%)\n\n    SoV\n3.28 (2.94, 3.60)\n3.40 (3.10, 3.70)\n&lt;0.0013\n    STJ\n3.20 (2.70, 3.51)\n3.40 (2.83, 3.70)\n&lt;0.0013\n    AscAo\n3.30 (3.00, 3.60)\n3.40 (3.20, 3.70)\n&lt;0.0013\n    AortaSize\n3.30 (2.99, 3.60)\n3.40 (3.10, 3.70)\n&lt;0.0013\n    AortaSize_cat\n\n\n&lt;0.0012\n        Normal\n6,500 (92%)\n2,541 (89%)\n\n        Mild\n456 (6.5%)\n251 (8.8%)\n\n        Moderate\n75 (1.1%)\n39 (1.4%)\n\n        Severe\n9 (0.1%)\n10 (0.4%)\n\n  \n  \n  \n    \n      1 n (%); Median (IQR)\n    \n    \n      2 Pearson’s Chi-squared test\n    \n    \n      3 Wilcoxon rank sum test"
  },
  {
    "objectID": "data_summary.html#desc_table",
    "href": "data_summary.html#desc_table",
    "title": "2  Different ways to summarise",
    "section": "2.1 desc_table",
    "text": "2.1 desc_table\n\nlibrary(desctable)\n\nThe library desctable provides desc_table() function to calculate main descriptive statistics. The output is a new dataframe. You can also change the output using desc_output() function.\nNumeric variables\n\ndesc_table(dt %&gt;% select(-c(am, vs))) %&gt;% desc_output('pander')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \nMin\nQ1\nMed\nMean\nQ3\nMax\nsd\nIQR\n\n\n\n\nmpg\n10\n15\n19\n20\n23\n34\n6\n7.4\n\n\ncyl\n4\n4\n6\n6.2\n8\n8\n1.8\n4\n\n\ndisp\n71\n121\n196\n231\n326\n472\n124\n205\n\n\nhp\n52\n96\n123\n147\n180\n335\n69\n84\n\n\ndrat\n2.8\n3.1\n3.7\n3.6\n3.9\n4.9\n0.53\n0.84\n\n\nwt\n1.5\n2.6\n3.3\n3.2\n3.6\n5.4\n0.98\n1\n\n\nqsec\n14\n17\n18\n18\n19\n23\n1.8\n2\n\n\ngear\n3\n3\n4\n3.7\n4\n5\n0.74\n1\n\n\ncarb\n1\n2\n2\n2.8\n4\n8\n1.6\n2\n\n\n\n\n\nCategorical variables\n\ndesc_table(dt %&gt;% select(c(am, vs))) %&gt;% desc_output(\"pander\")\n\n\n\n\n\n\n\n\n\n \nN\n%\n\n\n\n\nam\n32\n\n\n\n    automatic\n19\n59\n\n\n    manual\n13\n41\n\n\nvs\n32\n\n\n\n    V-shaped\n18\n56\n\n\n    straight\n14\n44\n\n\n\n\n\nSee more: https://cran.r-project.org/web/packages/desctable/vignettes/desctable.html"
  },
  {
    "objectID": "data_summary.html#skim",
    "href": "data_summary.html#skim",
    "title": "2  Different ways to summarise",
    "section": "2.2 skim",
    "text": "2.2 skim\n\nlibrary(skimr)\n\nskim() from skimr package provides a complete summary separated between numeric and categorical variables. Interestingly, histogram bars are shown in the last column for numeric variables.\n\nskim(dt)\n\n\nData summary\n\n\nName\ndt\n\n\nNumber of rows\n32\n\n\nNumber of columns\n11\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n2\n\n\nnumeric\n9\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nvs\n0\n1\nFALSE\n2\nV-s: 18, str: 14\n\n\nam\n0\n1\nFALSE\n2\naut: 19, man: 13\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nmpg\n0\n1\n20.09\n6.03\n10.40\n15.43\n19.20\n22.80\n33.90\n▃▇▅▁▂\n\n\ncyl\n0\n1\n6.19\n1.79\n4.00\n4.00\n6.00\n8.00\n8.00\n▆▁▃▁▇\n\n\ndisp\n0\n1\n230.72\n123.94\n71.10\n120.83\n196.30\n326.00\n472.00\n▇▃▃▃▂\n\n\nhp\n0\n1\n146.69\n68.56\n52.00\n96.50\n123.00\n180.00\n335.00\n▇▇▆▃▁\n\n\ndrat\n0\n1\n3.60\n0.53\n2.76\n3.08\n3.70\n3.92\n4.93\n▇▃▇▅▁\n\n\nwt\n0\n1\n3.22\n0.98\n1.51\n2.58\n3.33\n3.61\n5.42\n▃▃▇▁▂\n\n\nqsec\n0\n1\n17.85\n1.79\n14.50\n16.89\n17.71\n18.90\n22.90\n▃▇▇▂▁\n\n\ngear\n0\n1\n3.69\n0.74\n3.00\n3.00\n4.00\n4.00\n5.00\n▇▁▆▁▂\n\n\ncarb\n0\n1\n2.81\n1.62\n1.00\n2.00\n2.00\n4.00\n8.00\n▇▂▅▁▁\n\n\n\n\n\nSee more: https://cran.r-project.org/web/packages/skimr/vignettes/skimr.html"
  },
  {
    "objectID": "data_summary.html#tableone",
    "href": "data_summary.html#tableone",
    "title": "2  Different ways to summarise",
    "section": "2.3 tableone",
    "text": "2.3 tableone\n\nlibrary(tableone)\n\nTable 1 is a common name used in biomedical research paper that describes the patient demographics. A package called tableone aims to ease the production of this table, and we can use this package to summarise our data.\n\nCreateTableOne(data=dt, strata=\"am\")\n\n                   Stratified by am\n                    automatic       manual          p      test\n  n                     19              13                     \n  mpg (mean (SD))    17.15 (3.83)    24.39 (6.17)   &lt;0.001     \n  cyl (mean (SD))     6.95 (1.54)     5.08 (1.55)    0.002     \n  disp (mean (SD))  290.38 (110.17) 143.53 (87.20)  &lt;0.001     \n  hp (mean (SD))    160.26 (53.91)  126.85 (84.06)   0.180     \n  drat (mean (SD))    3.29 (0.39)     4.05 (0.36)   &lt;0.001     \n  wt (mean (SD))      3.77 (0.78)     2.41 (0.62)   &lt;0.001     \n  qsec (mean (SD))   18.18 (1.75)    17.36 (1.79)    0.206     \n  vs = straight (%)      7 (36.8)        7 ( 53.8)   0.556     \n  am = manual (%)        0 ( 0.0)       13 (100.0)  &lt;0.001     \n  gear (mean (SD))    3.21 (0.42)     4.38 (0.51)   &lt;0.001     \n  carb (mean (SD))    2.74 (1.15)     2.92 (2.18)    0.754"
  },
  {
    "objectID": "data_summary.html#tbl_summary",
    "href": "data_summary.html#tbl_summary",
    "title": "2  Different ways to summarise",
    "section": "2.4 tbl_summary",
    "text": "2.4 tbl_summary\n\nlibrary(gtsummary)\n\nThe gtsummary package provides a rich collection of functions for summarising tables and results from different statistical analyses, e.g. regression, survival analysis, etc.. The simple one, tbl_summary(), can generate a beautiful summary table, ready for publication.\n\ndt %&gt;%\n  tbl_summary(\n    by = am,\n    label = c(\n      mpg ~ \"Miles/gallon (US)\",\n      cyl ~ \"Number of cylinders\",\n      disp ~ \"Displacement (cu.in)\",\n      hp ~ \"Gross horsepower\",\n      drat ~ \"Rear axle ratio\",\n      wt ~ \"Weight (1,000 lbs)\",\n      qsec ~\"Quarter mile time\",\n      vs ~ \"Engine type\",\n      gear ~ \"Number of forward gears\",\n      carb ~ \"Number of carburators\"\n    ),\n    statistic = c(all_continuous() ~ \"{mean} ± {sd}\")\n  ) %&gt;%\n  add_p() %&gt;%\n  separate_p_footnotes() %&gt;%\n  add_overall(last = TRUE) %&gt;%\n  modify_spanning_header(c(\"stat_1\", \"stat_2\") ~ \"**Transmission**\")\n\n\n\n\n\n  \n    \n      Characteristic\n      \n        Transmission\n      \n      p-value\n      Overall, N = 321\n    \n    \n      automatic, N = 191\n      manual, N = 131\n    \n  \n  \n    Miles/gallon (US)\n17.1 ± 3.8\n24.4 ± 6.2\n0.0022\n20.1 ± 6.0\n    Number of cylinders\n\n\n0.0093\n\n        4\n3 (16%)\n8 (62%)\n\n11 (34%)\n        6\n4 (21%)\n3 (23%)\n\n7 (22%)\n        8\n12 (63%)\n2 (15%)\n\n14 (44%)\n    Displacement (cu.in)\n290 ± 110\n144 ± 87\n&lt;0.0012\n231 ± 124\n    Gross horsepower\n160 ± 54\n127 ± 84\n0.0462\n147 ± 69\n    Rear axle ratio\n3.29 ± 0.39\n4.05 ± 0.36\n&lt;0.0012\n3.60 ± 0.53\n    Weight (1,000 lbs)\n3.77 ± 0.78\n2.41 ± 0.62\n&lt;0.0012\n3.22 ± 0.98\n    Quarter mile time\n18.18 ± 1.75\n17.36 ± 1.79\n0.32\n17.85 ± 1.79\n    Engine type\n\n\n0.34\n\n        V-shaped\n12 (63%)\n6 (46%)\n\n18 (56%)\n        straight\n7 (37%)\n7 (54%)\n\n14 (44%)\n    Number of forward gears\n\n\n&lt;0.0013\n\n        3\n15 (79%)\n0 (0%)\n\n15 (47%)\n        4\n4 (21%)\n8 (62%)\n\n12 (38%)\n        5\n0 (0%)\n5 (38%)\n\n5 (16%)\n    Number of carburators\n\n\n0.33\n\n        1\n3 (16%)\n4 (31%)\n\n7 (22%)\n        2\n6 (32%)\n4 (31%)\n\n10 (31%)\n        3\n3 (16%)\n0 (0%)\n\n3 (9.4%)\n        4\n7 (37%)\n3 (23%)\n\n10 (31%)\n        6\n0 (0%)\n1 (7.7%)\n\n1 (3.1%)\n        8\n0 (0%)\n1 (7.7%)\n\n1 (3.1%)\n  \n  \n  \n    \n      1 Mean ± SD; n (%)\n    \n    \n      2 Wilcoxon rank sum test\n    \n    \n      3 Fisher’s exact test\n    \n    \n      4 Pearson’s Chi-squared test\n    \n  \n\n\n\n\nSee more: https://www.danieldsjoberg.com/gtsummary/index.html"
  }
]