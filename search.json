[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Mastering R by Examples",
    "section": "",
    "text": "About\nThis is a cookbook recipes for R using data directly. There is no structure in this book. All chapters are independent and can be executed directly. Use these recipe to quickly learn to solving data analytics with R."
  },
  {
    "objectID": "pipes.html#what-is-a-pipe-or-chain-operator",
    "href": "pipes.html#what-is-a-pipe-or-chain-operator",
    "title": "1  %>% operator",
    "section": "1.1 What is a pipe or chain operator?",
    "text": "1.1 What is a pipe or chain operator?\nThe idea is to simply perform a set of operations where the output of one operation becomes an input of the next operation.\nLet’s say you have the following operations:\n\n# --- this code is not running\ndata &lt;- get_input()\ndata_1 &lt;- shift_data(data, h=10)\ndata_2 &lt;- separate_data(data_1, sep=\"_\", sort=TRUE)\nprint(data_2)\n# ---\n\nYou can write the whole operations to become\n\n# --- this code is not running\nprint(separate_data(shift_data(get_input(), h=10), sep=\"_\", sort=TRUE))\n# ---\n\nbut this becomes cumbersome and unreadable.\nIf you examine the operations further, you notice that the first argument of each operation, except the first one, is the output of the previous operation. With the pipe operator %&gt;%, you can rewrite it into\n\n# --- this code is not running\nget_input() %&gt;%\n  shift_data(h=10) %&gt;%\n  separate_date(sep=\"_\", sort=TRUE) %&gt;%\n  print()\n# ---\n\nAnd the block of operation becomes readable: get the input data, then shift the data by 10, then separate the data by using the character ‘_’ as a separator and sort them, and finally print the result. You don’t even define a variable to capture the results !!.\n\n\n\n\n\n\nNote\n\n\n\nBy the default, the %&gt;% operator will give the input of the left hand side operation into the first argument of the right hand side operation. There is a trick to put which argument you want on the right hand side by using the dot operator. See the later examples."
  },
  {
    "objectID": "pipes.html#example-1-the-empire-strikes-back",
    "href": "pipes.html#example-1-the-empire-strikes-back",
    "title": "1  %>% operator",
    "section": "1.2 Example 1: The Empire Strikes Back",
    "text": "1.2 Example 1: The Empire Strikes Back\nThere is a built-in data called starwars from tidyr package, which is part of tidyverse. You are interested to see names of characters that appeared in the famous “The Empire Strikes Back” episode of Star Wars.\n\nglimpse(starwars)\n\nRows: 87\nColumns: 14\n$ name       &lt;chr&gt; \"Luke Skywalker\", \"C-3PO\", \"R2-D2\", \"Darth Vader\", \"Leia Or…\n$ height     &lt;int&gt; 172, 167, 96, 202, 150, 178, 165, 97, 183, 182, 188, 180, 2…\n$ mass       &lt;dbl&gt; 77.0, 75.0, 32.0, 136.0, 49.0, 120.0, 75.0, 32.0, 84.0, 77.…\n$ hair_color &lt;chr&gt; \"blond\", NA, NA, \"none\", \"brown\", \"brown, grey\", \"brown\", N…\n$ skin_color &lt;chr&gt; \"fair\", \"gold\", \"white, blue\", \"white\", \"light\", \"light\", \"…\n$ eye_color  &lt;chr&gt; \"blue\", \"yellow\", \"red\", \"yellow\", \"brown\", \"blue\", \"blue\",…\n$ birth_year &lt;dbl&gt; 19.0, 112.0, 33.0, 41.9, 19.0, 52.0, 47.0, NA, 24.0, 57.0, …\n$ sex        &lt;chr&gt; \"male\", \"none\", \"none\", \"male\", \"female\", \"male\", \"female\",…\n$ gender     &lt;chr&gt; \"masculine\", \"masculine\", \"masculine\", \"masculine\", \"femini…\n$ homeworld  &lt;chr&gt; \"Tatooine\", \"Tatooine\", \"Naboo\", \"Tatooine\", \"Alderaan\", \"T…\n$ species    &lt;chr&gt; \"Human\", \"Droid\", \"Droid\", \"Human\", \"Human\", \"Human\", \"Huma…\n$ films      &lt;list&gt; &lt;\"A New Hope\", \"The Empire Strikes Back\", \"Return of the J…\n$ vehicles   &lt;list&gt; &lt;\"Snowspeeder\", \"Imperial Speeder Bike\"&gt;, &lt;&gt;, &lt;&gt;, &lt;&gt;, \"Imp…\n$ starships  &lt;list&gt; &lt;\"X-wing\", \"Imperial shuttle\"&gt;, &lt;&gt;, &lt;&gt;, \"TIE Advanced x1\",…\n\n\n\n1.2.1 Without piping\nLet’s work out traditionally without using the pipe operators. To simplify the name of variables, I’ll use the same name of variable for the input/output processes.\n\n# read the data\ndt &lt;- starwars\n# filter only characters that appeared in \"The Empire Strikes Back\" movie\ndt &lt;- rowwise(dt)\ndt &lt;- filter(dt, \"The Empire Strikes Back\" %in% films)\ndt &lt;- ungroup(dt)\n# show the name, sex, gender, homeworld and their species only\ndt &lt;- select(dt, c(name, sex, gender, homeworld, species))\n# print\ndt\n\n\n\n1.2.2 With piping\n\nstarwars %&gt;%\n  rowwise() %&gt;%\n  filter(\"The Empire Strikes Back\" %in% films) %&gt;%\n  ungroup() %&gt;%\n  select(c(name, sex, gender, homeworld, species)) %&gt;%\n  knitr::kable()\n\n\n\n\nname\nsex\ngender\nhomeworld\nspecies\n\n\n\n\nLuke Skywalker\nmale\nmasculine\nTatooine\nHuman\n\n\nC-3PO\nnone\nmasculine\nTatooine\nDroid\n\n\nR2-D2\nnone\nmasculine\nNaboo\nDroid\n\n\nDarth Vader\nmale\nmasculine\nTatooine\nHuman\n\n\nLeia Organa\nfemale\nfeminine\nAlderaan\nHuman\n\n\nObi-Wan Kenobi\nmale\nmasculine\nStewjon\nHuman\n\n\nChewbacca\nmale\nmasculine\nKashyyyk\nWookiee\n\n\nHan Solo\nmale\nmasculine\nCorellia\nHuman\n\n\nWedge Antilles\nmale\nmasculine\nCorellia\nHuman\n\n\nYoda\nmale\nmasculine\nNA\nYoda’s species\n\n\nPalpatine\nmale\nmasculine\nNaboo\nHuman\n\n\nBoba Fett\nmale\nmasculine\nKamino\nHuman\n\n\nIG-88\nnone\nmasculine\nNA\nDroid\n\n\nBossk\nmale\nmasculine\nTrandosha\nTrandoshan\n\n\nLando Calrissian\nmale\nmasculine\nSocorro\nHuman\n\n\nLobot\nmale\nmasculine\nBespin\nHuman\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nIn the example above, there is statement rowwise() before filtering the rows. This is needed because by default statistical operations are performed column-wise. For example, max(A,B,C) will perform the maximum of columns A, B, and C together.\n\ndt &lt;- data.frame(id=paste(\"id\", c(1:5), sep=\"_\"), A=runif(5), B=runif(5), C=runif(5))\n\nmutate(dt, max=max(A,B,C))\n\n    id         A         B         C       max\n1 id_1 0.6869058 0.1634486 0.3757258 0.7990286\n2 id_2 0.4000553 0.6102485 0.7620478 0.7990286\n3 id_3 0.7091746 0.6422993 0.6870269 0.7990286\n4 id_4 0.1055016 0.4261229 0.1333207 0.7990286\n5 id_5 0.7990286 0.4168287 0.6400489 0.7990286\n\n\nCompare to this:\n\ndt %&gt;% rowwise() %&gt;% mutate(max=max(A,B,C)) %&gt;% ungroup()\n\n# A tibble: 5 × 5\n  id        A     B     C   max\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 id_1  0.687 0.163 0.376 0.687\n2 id_2  0.400 0.610 0.762 0.762\n3 id_3  0.709 0.642 0.687 0.709\n4 id_4  0.106 0.426 0.133 0.426\n5 id_5  0.799 0.417 0.640 0.799\n\n\nThe rowwise() function groups data by rows, and the last ungroup() function removes the grouping.\nSee more about row-wise and column-wise operation in R."
  },
  {
    "objectID": "pipes.html#example-2-piping-with-gtsummary",
    "href": "pipes.html#example-2-piping-with-gtsummary",
    "title": "1  %>% operator",
    "section": "1.3 Example 2: Piping with gtsummary",
    "text": "1.3 Example 2: Piping with gtsummary\nThere are some packages that are fully compatible with %&gt;% operator. One of them is gtsummary, which provides lots of useful summarisation functions for different tables.\nLet’s try to make a summary of the iris3 table:\n\nlibrary(gtsummary)\n\n#BlackLivesMatter\n\n\n\niris %&gt;%\n  tbl_summary(by=Species) %&gt;%\n  add_p() %&gt;%\n  modify_header(label = \"*Morphology*\") %&gt;%\n  modify_spanning_header(all_stat_cols() ~ \"**Iris Species N = {N}**\")\n\n\n\n\n\n  \n    \n      Morphology\n      \n        Iris Species N = 150\n      \n      p-value2\n    \n    \n      setosa, N = 501\n      versicolor, N = 501\n      virginica, N = 501\n    \n  \n  \n    Sepal.Length\n5.00 (4.80, 5.20)\n5.90 (5.60, 6.30)\n6.50 (6.23, 6.90)\n&lt;0.001\n    Sepal.Width\n3.40 (3.20, 3.68)\n2.80 (2.53, 3.00)\n3.00 (2.80, 3.18)\n&lt;0.001\n    Petal.Length\n1.50 (1.40, 1.58)\n4.35 (4.00, 4.60)\n5.55 (5.10, 5.88)\n&lt;0.001\n    Petal.Width\n0.20 (0.20, 0.30)\n1.30 (1.20, 1.50)\n2.00 (1.80, 2.30)\n&lt;0.001\n  \n  \n  \n    \n      1 Median (IQR)\n    \n    \n      2 Kruskal-Wallis rank sum test"
  },
  {
    "objectID": "pipes.html#example-3-ggplot2",
    "href": "pipes.html#example-3-ggplot2",
    "title": "1  %>% operator",
    "section": "1.4 Example 3: ggplot2",
    "text": "1.4 Example 3: ggplot2\nThe package ggplot2 also provide chaining operations by using different symbol, e.g. + the plus character. Usually it’s intended to add new objects to the canvas. You can combine both pipe operations to create a nice plot with readable script. For example,\n\nlibrary(ggplot2)\n\n\nUSArrests %&gt;%\n  # make an explicit column for the row names\n  rownames_to_column(\"State\") %&gt;%\n  # ignore the UrbanPop column\n  select(-c(UrbanPop)) %&gt;%\n  # make a long table\n  pivot_longer(-c(State), names_to = \"Crime\", values_to = \"Arrests\") %&gt;%\n  # sort by US state\n  arrange(State) %&gt;%\n  # give it to ggplot\n  ggplot(aes(x=State, y=Arrests, color=Crime)) +\n  # hence the chaining operations in ggplot\n  facet_wrap(vars(Crime), scales=\"free_x\") +\n  geom_segment(aes(x=State, xend=State, y=0, yend=Arrests)) +\n  geom_point(size=2, alpha=0.6) +\n  coord_flip() +\n  theme(legend.position=\"none\") +\n  xlab(\"US State\") +\n  ylab(\"Number of arrests (in 100,000)\")"
  },
  {
    "objectID": "pipes.html#differences-between-and-operators",
    "href": "pipes.html#differences-between-and-operators",
    "title": "1  %>% operator",
    "section": "1.5 Differences between %>% and |> operators",
    "text": "1.5 Differences between %&gt;% and |&gt; operators\nThe statement:\n\nmtcars %&gt;% filter(gear==5)\n\nis equivalent with\n\nmtcars |&gt; filter(gear==5)\n\nwhich is the piping operation for\n\nfilter(mtcars, gear==5)\n\nThere are some advantages of using %&gt;% operator:\n\nIt allows you to change the argument placement of the next operation by using the dot operator:\n\n# default is the first argument\nx %&gt;% f(1,2,3)   # equals to f(x,1,2,3)\nx %&gt;% f(1,.,2,3) # equals to f(1,x,2,3)\n\nFor the base operator, you must give a named attribute to change the placement:\n\n# default is the first argument\nx |&gt; f(1,2,3)   # equals to f(x,1,2,3)\nx |&gt; f(1,y=_)   # equals to f(1,x)\n\nMore flexibility with dot operator:\n\nx %&gt;% f(.$var)      # equals to f(x, x$var)\nx %&gt;% {f(.$a, .$b)} # equals to f(x$a, x$b)\n\nYou can use dot to create a lambda function\n\nf &lt;- . %&gt;% filter(x=\"abc\")\nf\n\nFunctional sequence with the following components:\n\n 1. filter(., x = \"abc\")\n\nUse 'functions' to extract the individual functions."
  },
  {
    "objectID": "load_and_prepare.html#without-correction",
    "href": "load_and_prepare.html#without-correction",
    "title": "2  Reading CSV file",
    "section": "2.1 Without correction",
    "text": "2.1 Without correction\n\nread_csv('sample_data/echo_data.csv', show_col_types = FALSE) %&gt;%\n  select(StudyID, PatientID, Sex, Age_At_Echo, Examination_Date, Outcome, SoV, STJ, AscAo) %&gt;%\n  sample_n(10000) %&gt;%\n  glimpse()\n\nRows: 10,000\nColumns: 9\n$ StudyID          &lt;dbl&gt; 2123388, 745387, 1434781, 189821, 2151637, 897653, 17…\n$ PatientID        &lt;dbl&gt; 814577, 570386, 188706, 373050, 833507, 546257, 37066…\n$ Sex              &lt;chr&gt; \"Female\", \"Female\", \"Male\", \"Female\", \"Male\", \"Male\",…\n$ Age_At_Echo      &lt;dbl&gt; 66, 30, 88, 32, 56, 65, 47, 64, 18, 43, 71, 75, 63, 8…\n$ Examination_Date &lt;date&gt; 2011-08-04, 2009-02-03, 2012-04-04, 2005-09-05, 2017…\n$ Outcome          &lt;chr&gt; \"Alive\", \"Alive\", \"Dead\", \"Alive\", \"Alive\", \"Alive\", …\n$ SoV              &lt;dbl&gt; 3.600, 2.673, 2.710, 2.800, 4.100, 3.289, 3.200, 3.90…\n$ STJ              &lt;dbl&gt; 3.5, NA, NA, NA, 3.8, NA, 2.8, NA, NA, NA, NA, NA, 4.…\n$ AscAo            &lt;dbl&gt; NA, NA, NA, NA, NA, 3.1, NA, NA, NA, NA, NA, NA, NA, …"
  },
  {
    "objectID": "load_and_prepare.html#with-corrections",
    "href": "load_and_prepare.html#with-corrections",
    "title": "2  Reading CSV file",
    "section": "2.2 With corrections",
    "text": "2.2 With corrections\nand some new variables added\n\ndt &lt;- read_csv('sample_data/echo_data.csv', show_col_types = FALSE,\n         col_types = cols(\n           PatientID = col_character(), \n           StudyID = col_character(),\n           Examination_Date = col_date(\"%Y-%m-%d\"),\n           Sex = col_factor(),\n           Outcome = col_factor())) %&gt;%\n  # select few variables for the sake of simplicity\n  select(StudyID, PatientID, Sex, Age_At_Echo, Examination_Date, Outcome, SoV, STJ, AscAo) %&gt;%\n  # just take randomly 10,000 rows for this demonstration\n  sample_n(10000) %&gt;%\n  mutate(\n    # we want to create a new variable Age that consists of range of ages\n    Age = case_when(\n      Age_At_Echo &lt; 40 ~ \"&lt; 40\",\n      Age_At_Echo &lt; 50 ~ \"40-50\",\n      Age_At_Echo &lt; 60 ~ \"50-60\",\n      Age_At_Echo &lt; 70 ~ \"60-70\",\n      Age_At_Echo &gt;= 70 ~ \"≥ 70\"\n    ) %&gt;% factor(levels=c(\"&lt; 40\", \"40-50\", \"50-60\", \"60-70\", \"≥ 70\"))\n  ) %&gt;%\n  # another computation is to create a new variable called Aorta_Size\n  # which takes the maximum value between SoV, STJ, and Asc_Ao values\n  # for each scan, then categorise it to 4 groups of severities\n  rowwise() %&gt;%\n  mutate(\n    AortaSize = max(SoV, STJ, AscAo, na.rm=TRUE),\n    AortaSize_cat = case_when(\n      AortaSize &lt;= 4.0 ~ \"Normal\",\n      AortaSize &lt;= 4.5 ~ \"Mild\",\n      AortaSize &lt;= 5.0 ~ \"Moderate\",\n      AortaSize &lt;= 9.0 ~ \"Severe\",\n      .default = NA) %&gt;% factor(levels = c(\"Normal\", \"Mild\", \"Moderate\", \"Severe\"))) %&gt;%\n  ungroup()\n\n# show the structure\nglimpse(dt)\n\nRows: 10,000\nColumns: 12\n$ StudyID          &lt;chr&gt; \"1735188\", \"2146570\", \"2119880\", \"1979020\", \"2041370\"…\n$ PatientID        &lt;chr&gt; \"315301\", \"825437\", \"819924\", \"770853\", \"745490\", \"80…\n$ Sex              &lt;fct&gt; Male, Female, Female, Female, Female, Female, Female,…\n$ Age_At_Echo      &lt;dbl&gt; 72, 69, 67, 56, 26, 78, 65, 83, 70, 62, 37, 64, 61, 8…\n$ Examination_Date &lt;date&gt; 2010-04-27, 2012-06-18, 2008-04-09, 2013-09-26, 2011…\n$ Outcome          &lt;fct&gt; Dead, Alive, Alive, Alive, Alive, Dead, Alive, Dead, …\n$ SoV              &lt;dbl&gt; 3.700, 3.700, 3.400, 3.000, 2.900, 2.900, 3.200, 2.97…\n$ STJ              &lt;dbl&gt; NA, 3.800, 3.300, NA, NA, NA, NA, NA, 3.052, NA, NA, …\n$ AscAo            &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, 3.1, 2.6, NA, NA,…\n$ Age              &lt;fct&gt; ≥ 70, 60-70, 60-70, 50-60, &lt; 40, ≥ 70, 60-70, ≥ 70, ≥…\n$ AortaSize        &lt;dbl&gt; 3.700, 3.800, 3.400, 3.000, 2.900, 2.900, 3.200, 2.97…\n$ AortaSize_cat    &lt;fct&gt; Normal, Normal, Normal, Normal, Normal, Normal, Norma…\n\n\nExplanations\n\nCorrecting data types\n\nThe argument of\n\ncol_types = cols(\n  PatientID = col_character(), \n  StudyID = col_character(),\n  Examination_Date = col_date(\"%Y-%m-%d\"),\n  Sex = col_factor(),\n  Outcome = col_factor()\n)\n\nforces read_csv() to use specific data types for specific columns (see: cols specification).\n\nCreate a new variable with mutate\n\nThe statement\n\nmutate(\n  Age = case_when(\n    Age_At_Echo &lt; 40 ~ \"&lt; 40\",\n    Age_At_Echo &lt; 50 ~ \"40-50\",\n    Age_At_Echo &lt; 60 ~ \"50-60\",\n    Age_At_Echo &lt; 70 ~ \"60-70\",\n    Age_At_Echo &gt;= 70 ~ \"≥ 70\"\n    ) %&gt;% factor(levels=c(\"&lt; 40\", \"40-50\", \"50-60\", \"60-70\", \"≥ 70\"))\n)\n\ncreates a new column Age as a factor that shows a range of ages between &lt;40, 40-50, 50-60, 60-70, ≥70 years old.\nThere is also another mutate statement to create a new column AortaSize and AortaSize_cat based on the maximum value between STJ, SoV and AscAo measurements. I separated this creation from the above because we need to specify R to calculate the maximum value row-wise instead of column-wise. Hence the rowwise() function preceded.\n\nrowwise() %&gt;%\nmutate(\n  AortaSize = max(SoV, STJ, AscAo, na.rm=TRUE),\n  AortaSize_cat = case_when(\n    AortaSize &lt;= 4.0 ~ \"Normal\",\n    AortaSize &lt;= 4.5 ~ \"Mild\",\n    AortaSize &lt;= 5.0 ~ \"Moderate\",\n    AortaSize &lt;= 9.0 ~ \"Severe\",\n    .default = NA) %&gt;% factor(levels = c(\"Normal\", \"Mild\", \"Moderate\", \"Severe\"))\n)\n\nSee more about mutate, case_when, and rowwise functions."
  },
  {
    "objectID": "load_and_prepare.html#table-summary",
    "href": "load_and_prepare.html#table-summary",
    "title": "2  Reading CSV file",
    "section": "2.3 Table summary",
    "text": "2.3 Table summary\nLet’s summarise our data to compare all patients based on their survival: dead or alive.\n\nlibrary('gtsummary')\n\nNote that the data may contain multiple scans for a patient. Thus, we will search the earliest scan first for each patient for the comparison.\n\ndt %&gt;%\n  # analyse examination date per patient\n  group_by(PatientID) %&gt;%\n  mutate(\n    Earliest_Date = min(Examination_Date)\n  ) %&gt;%\n  # release the grouping and now filter the earliest date only\n  ungroup() %&gt;%\n  filter(Examination_Date == Earliest_Date) %&gt;%\n  # this should filter out multiple scan\n  # we can safely give the data to tbl_summary function\n  tbl_summary(\n    by = Outcome,\n    include = c(Sex, Age, SoV, STJ, AscAo, AortaSize, AortaSize_cat),\n    missing = \"no\"\n  ) %&gt;%\n  add_p() %&gt;%\n  separate_p_footnotes()\n\n\n\n\n\n  \n    \n      Characteristic\n      Alive, N = 7,0791\n      Dead, N = 2,7961\n      p-value\n    \n  \n  \n    Sex\n\n\n0.0032\n        Male\n3,764 (53%)\n1,580 (57%)\n\n        Female\n3,315 (47%)\n1,216 (43%)\n\n    Age\n\n\n&lt;0.0012\n        &lt; 40\n1,036 (15%)\n74 (2.6%)\n\n        40-50\n900 (13%)\n93 (3.3%)\n\n        50-60\n1,401 (20%)\n188 (6.7%)\n\n        60-70\n1,720 (24%)\n514 (18%)\n\n        ≥ 70\n2,022 (29%)\n1,927 (69%)\n\n    SoV\n3.30 (2.96, 3.60)\n3.35 (3.02, 3.70)\n&lt;0.0013\n    STJ\n3.20 (2.80, 3.60)\n3.20 (2.80, 3.60)\n&gt;0.93\n    AscAo\n3.30 (3.00, 3.60)\n3.50 (3.20, 3.80)\n&lt;0.0013\n    AortaSize\n3.30 (3.00, 3.63)\n3.39 (3.06, 3.70)\n&lt;0.0013\n    AortaSize_cat\n\n\n0.0152\n        Normal\n6,533 (92%)\n2,526 (90%)\n\n        Mild\n464 (6.6%)\n231 (8.3%)\n\n        Moderate\n71 (1.0%)\n32 (1.1%)\n\n        Severe\n11 (0.2%)\n7 (0.3%)\n\n  \n  \n  \n    \n      1 n (%); Median (IQR)\n    \n    \n      2 Pearson’s Chi-squared test\n    \n    \n      3 Wilcoxon rank sum test"
  },
  {
    "objectID": "data_summary.html#desc_table",
    "href": "data_summary.html#desc_table",
    "title": "3  Different ways to summarise",
    "section": "3.1 desc_table",
    "text": "3.1 desc_table\n\nlibrary(desctable)\n\nThe library desctable provides desc_table() function to calculate main descriptive statistics. The output is a new dataframe. You can also change the output using desc_output() function.\nNumeric variables\n\ndesc_table(dt %&gt;% select(-c(am, vs))) %&gt;% desc_output('pander')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \nMin\nQ1\nMed\nMean\nQ3\nMax\nsd\nIQR\n\n\n\n\nmpg\n10\n15\n19\n20\n23\n34\n6\n7.4\n\n\ncyl\n4\n4\n6\n6.2\n8\n8\n1.8\n4\n\n\ndisp\n71\n121\n196\n231\n326\n472\n124\n205\n\n\nhp\n52\n96\n123\n147\n180\n335\n69\n84\n\n\ndrat\n2.8\n3.1\n3.7\n3.6\n3.9\n4.9\n0.53\n0.84\n\n\nwt\n1.5\n2.6\n3.3\n3.2\n3.6\n5.4\n0.98\n1\n\n\nqsec\n14\n17\n18\n18\n19\n23\n1.8\n2\n\n\ngear\n3\n3\n4\n3.7\n4\n5\n0.74\n1\n\n\ncarb\n1\n2\n2\n2.8\n4\n8\n1.6\n2\n\n\n\n\n\nCategorical variables\n\ndesc_table(dt %&gt;% select(c(am, vs))) %&gt;% desc_output(\"pander\")\n\n\n\n\n\n\n\n\n\n \nN\n%\n\n\n\n\nam\n32\n\n\n\n    automatic\n19\n59\n\n\n    manual\n13\n41\n\n\nvs\n32\n\n\n\n    V-shaped\n18\n56\n\n\n    straight\n14\n44\n\n\n\n\n\nSee more: https://cran.r-project.org/web/packages/desctable/vignettes/desctable.html"
  },
  {
    "objectID": "data_summary.html#skim",
    "href": "data_summary.html#skim",
    "title": "3  Different ways to summarise",
    "section": "3.2 skim",
    "text": "3.2 skim\n\nlibrary(skimr)\n\nskim() from skimr package provides a complete summary separated between numeric and categorical variables. Interestingly, histogram bars are shown in the last column for numeric variables.\n\nskim(dt)\n\n\nData summary\n\n\nName\ndt\n\n\nNumber of rows\n32\n\n\nNumber of columns\n11\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n2\n\n\nnumeric\n9\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nvs\n0\n1\nFALSE\n2\nV-s: 18, str: 14\n\n\nam\n0\n1\nFALSE\n2\naut: 19, man: 13\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nmpg\n0\n1\n20.09\n6.03\n10.40\n15.43\n19.20\n22.80\n33.90\n▃▇▅▁▂\n\n\ncyl\n0\n1\n6.19\n1.79\n4.00\n4.00\n6.00\n8.00\n8.00\n▆▁▃▁▇\n\n\ndisp\n0\n1\n230.72\n123.94\n71.10\n120.83\n196.30\n326.00\n472.00\n▇▃▃▃▂\n\n\nhp\n0\n1\n146.69\n68.56\n52.00\n96.50\n123.00\n180.00\n335.00\n▇▇▆▃▁\n\n\ndrat\n0\n1\n3.60\n0.53\n2.76\n3.08\n3.70\n3.92\n4.93\n▇▃▇▅▁\n\n\nwt\n0\n1\n3.22\n0.98\n1.51\n2.58\n3.33\n3.61\n5.42\n▃▃▇▁▂\n\n\nqsec\n0\n1\n17.85\n1.79\n14.50\n16.89\n17.71\n18.90\n22.90\n▃▇▇▂▁\n\n\ngear\n0\n1\n3.69\n0.74\n3.00\n3.00\n4.00\n4.00\n5.00\n▇▁▆▁▂\n\n\ncarb\n0\n1\n2.81\n1.62\n1.00\n2.00\n2.00\n4.00\n8.00\n▇▂▅▁▁\n\n\n\n\n\nSee more: https://cran.r-project.org/web/packages/skimr/vignettes/skimr.html"
  },
  {
    "objectID": "data_summary.html#tableone",
    "href": "data_summary.html#tableone",
    "title": "3  Different ways to summarise",
    "section": "3.3 tableone",
    "text": "3.3 tableone\n\nlibrary(tableone)\n\nTable 1 is a common name used in biomedical research paper that describes the patient demographics. A package called tableone aims to ease the production of this table, and we can use this package to summarise our data.\n\nCreateTableOne(data=dt, strata=\"am\")\n\n                   Stratified by am\n                    automatic       manual          p      test\n  n                     19              13                     \n  mpg (mean (SD))    17.15 (3.83)    24.39 (6.17)   &lt;0.001     \n  cyl (mean (SD))     6.95 (1.54)     5.08 (1.55)    0.002     \n  disp (mean (SD))  290.38 (110.17) 143.53 (87.20)  &lt;0.001     \n  hp (mean (SD))    160.26 (53.91)  126.85 (84.06)   0.180     \n  drat (mean (SD))    3.29 (0.39)     4.05 (0.36)   &lt;0.001     \n  wt (mean (SD))      3.77 (0.78)     2.41 (0.62)   &lt;0.001     \n  qsec (mean (SD))   18.18 (1.75)    17.36 (1.79)    0.206     \n  vs = straight (%)      7 (36.8)        7 ( 53.8)   0.556     \n  am = manual (%)        0 ( 0.0)       13 (100.0)  &lt;0.001     \n  gear (mean (SD))    3.21 (0.42)     4.38 (0.51)   &lt;0.001     \n  carb (mean (SD))    2.74 (1.15)     2.92 (2.18)    0.754"
  },
  {
    "objectID": "data_summary.html#tbl_summary",
    "href": "data_summary.html#tbl_summary",
    "title": "3  Different ways to summarise",
    "section": "3.4 tbl_summary",
    "text": "3.4 tbl_summary\n\nlibrary(gtsummary)\n\nThe gtsummary package provides a rich collection of functions for summarising tables and results from different statistical analyses, e.g. regression, survival analysis, etc.. The simple one, tbl_summary(), can generate a beautiful summary table, ready for publication.\n\ndt %&gt;%\n  tbl_summary(\n    by = am,\n    label = c(\n      mpg ~ \"Miles/gallon (US)\",\n      cyl ~ \"Number of cylinders\",\n      disp ~ \"Displacement (cu.in)\",\n      hp ~ \"Gross horsepower\",\n      drat ~ \"Rear axle ratio\",\n      wt ~ \"Weight (1,000 lbs)\",\n      qsec ~\"Quarter mile time\",\n      vs ~ \"Engine type\",\n      gear ~ \"Number of forward gears\",\n      carb ~ \"Number of carburators\"\n    ),\n    statistic = c(all_continuous() ~ \"{mean} ± {sd}\")\n  ) %&gt;%\n  add_p() %&gt;%\n  separate_p_footnotes() %&gt;%\n  add_overall(last = TRUE) %&gt;%\n  modify_spanning_header(c(\"stat_1\", \"stat_2\") ~ \"**Transmission**\")\n\n\n\n\n\n  \n    \n      Characteristic\n      \n        Transmission\n      \n      p-value\n      Overall, N = 321\n    \n    \n      automatic, N = 191\n      manual, N = 131\n    \n  \n  \n    Miles/gallon (US)\n17.1 ± 3.8\n24.4 ± 6.2\n0.0022\n20.1 ± 6.0\n    Number of cylinders\n\n\n0.0093\n\n        4\n3 (16%)\n8 (62%)\n\n11 (34%)\n        6\n4 (21%)\n3 (23%)\n\n7 (22%)\n        8\n12 (63%)\n2 (15%)\n\n14 (44%)\n    Displacement (cu.in)\n290 ± 110\n144 ± 87\n&lt;0.0012\n231 ± 124\n    Gross horsepower\n160 ± 54\n127 ± 84\n0.0462\n147 ± 69\n    Rear axle ratio\n3.29 ± 0.39\n4.05 ± 0.36\n&lt;0.0012\n3.60 ± 0.53\n    Weight (1,000 lbs)\n3.77 ± 0.78\n2.41 ± 0.62\n&lt;0.0012\n3.22 ± 0.98\n    Quarter mile time\n18.18 ± 1.75\n17.36 ± 1.79\n0.32\n17.85 ± 1.79\n    Engine type\n\n\n0.34\n\n        V-shaped\n12 (63%)\n6 (46%)\n\n18 (56%)\n        straight\n7 (37%)\n7 (54%)\n\n14 (44%)\n    Number of forward gears\n\n\n&lt;0.0013\n\n        3\n15 (79%)\n0 (0%)\n\n15 (47%)\n        4\n4 (21%)\n8 (62%)\n\n12 (38%)\n        5\n0 (0%)\n5 (38%)\n\n5 (16%)\n    Number of carburators\n\n\n0.33\n\n        1\n3 (16%)\n4 (31%)\n\n7 (22%)\n        2\n6 (32%)\n4 (31%)\n\n10 (31%)\n        3\n3 (16%)\n0 (0%)\n\n3 (9.4%)\n        4\n7 (37%)\n3 (23%)\n\n10 (31%)\n        6\n0 (0%)\n1 (7.7%)\n\n1 (3.1%)\n        8\n0 (0%)\n1 (7.7%)\n\n1 (3.1%)\n  \n  \n  \n    \n      1 Mean ± SD; n (%)\n    \n    \n      2 Wilcoxon rank sum test\n    \n    \n      3 Fisher’s exact test\n    \n    \n      4 Pearson’s Chi-squared test\n    \n  \n\n\n\n\nSee more: https://www.danieldsjoberg.com/gtsummary/index.html"
  }
]